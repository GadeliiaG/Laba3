# -*- coding: utf-8 -*-
"""train1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVk5dM-vicSc75FPYHm59dUGEU1GMJ_B
"""

# train.py
from metrics import calculate_metrics, plot_example
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from PIL import Image


# Загрузка данных

data = pd.read_csv('bank.csv', sep=';')

# Подготовка данных
data = pd.get_dummies(data, columns=['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome'])
X = data.drop(columns=['y'])
y = (data['y'] == 'yes').astype(int)  # Преобразование "yes" в 1 и "no" в 0

# Разделение данных на тренировочный и тестовый наборы
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Обучение модели (в примере - RandomForestClassifier, но можно использовать другие)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# После обучения модели
y_true = y_test
y_pred = model.predict(X_test)

accuracy, cm = calculate_metrics(y_true, y_pred)

correct_example = Image.open("confusion_matrix.png")
incorrect_example = Image.open("confusion_matrix_incorrect.png")
plot_example(correct_example, incorrect_example)  # Замените аргументы на конкретные примеры

# Сохраните метрики в файл metrics.txt
with open('metrics.txt', 'w') as f:
    f.write(f'Accuracy: {accuracy}\n')
    f.write(f'Confusion Matrix:\n{cm}')

